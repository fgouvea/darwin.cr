{"repository_name":"darwin","body":"# Darwin.cr\n\nA genetic algorithm Crystal library that aims to be simple, but highly customizable.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     darwin:\n       github: fgouvea/darwin.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"darwin\"\n\n# This will evaluate the fitness of each genome\nclass HelloWorldEvaluator < Darwin::Evaluator(Char)\n  def evaluate(genome : Array(Char)) : Float64\n    accuracy = 0.0\n\n    # Count how many characters in the genome match the string \"hello world!\"\n    (0...genome.size).each do |i|\n      accuracy += 1 if genome[i] == \"hello world!\".chars[i]\n    end\n\n    accuracy\n  end\nend\n\nconfig = Darwin::Config.new(\n  alphabet: Darwin::Alphabet::StringAlphabet.new(\"abcdefghijklmnopqrstuwvxyz?!,.; \"),\n  genome_length: 12,\n  population_size: 50\n) \n\nengine = Darwin::Engine.new(\n  config: config,\n  evaluation: HelloWorldEvaluator.new)\n\nengine.run(generations: 100)\n\nengine.population[0].dna # => The fittest individual after running\n```\n\nTo use `darwin.cr` to execute the genetic algorithm (GA) you will have to:\n\n* Code a class that extends `Darwin::Evaluator` and implements `evaluate(Array(T)) : Float64` to evaluate the fitness of a genome.\n* Crate a `Darwin::Config` object that defines:\n* * `alphabet` - an instance of `Darwin::Alphabet::Alphabet(T)`. You can one of the alphabets provided in this liberary such as `IntAlphabet`, `ArrayAlphabet` or `StringAlphabet` (see _Alphabet_ section below) or implement your own.\n* * `genome_length` - how many genes are in each individual of the population.\n* * `population_size` - how many individuals are in the population in each generation.\n* Crate a `Darwin::Engine` instance with the configuration and evaluator defined above\n\nThe `engine` instance lets you run the GA. At the end of every generation the population will be sorted by fitness from highest to lowest, so the fittest individual can be accessed as `engine.population[0]`.\n\nYou may have noticed that most of the classes included in this library have a generic type parameter `T`. This refers to the type of a single gene in the algorithm. By making the classes generic for `T`, Darwin can run for arrays of any type you want.\n\nThere are more options provided in the `config` and `engine` objects, as well as various implementations of the operators used in the GA (crossover, mutation, selection), all of which will be discussed in the sections below.\n\nAdditionally, you can declare a `Darwin::PostProcessor` that will run after each generation to examine or print the results, such as:\n\n```crystal\nclass Printer < Darwin::PostProcessor(Char)\n  def process(engine : Darwin::Engine(Char))\n    puts \"[#{engine.generation} #{engine.population[0].dna.join} (fitness = #{engine.population[0].fitness})]\"\n  end\nend\n\nengine = Darwin::Engine.new(..., post: Printer.new)\n```\n\n### Config\n\nThe `Darwin::Config` class has the following properties:\n\n* `alphabet : Darwin::Alphabet::Alphabet(T)` - an instance of `Darwin::Alphabet::Alphabet(T)`. You can one of the alphabets provided in this liberary such as `IntAlphabet`, `ArrayAlphabet` or `StringAlphabet` (see _Alphabet_ section below) or implement your own.\n* `genome_length : Int32` - how many genes are in each individual of the population.\n* `population_size : Int32` - how many individuals are in the population in each generation.\n* `elitism : Int32` - number of the fittest individuals that will be carried over unchanged to the next population in every generation. This can sometimes help avoid regressions and speed up the algorithm. _(Default = 0)_\n\nThis properties can be assigned as named paremters in the constructor or changed with the setters (e.g. `config.elitism = 2`) after the object has been initialized.\n\n### Engine\n\nThe `Darwin::Engine` object is responsible for actually carrying out the GA and accepts the following parameters on initialization:\n\n* `config : Config(T)` - the Darwin config object.\n* `evaluation : Evaluator(T)` - the evaluator object that will determine the fitness of an individual, which will in turn determine how likely it is to be selected for mating into the next generation.\n*`crossover : CrossoverOperator(T)` - the crossover operator used to combine two individuals to generate another. By default this is an instance of `Darwin::Crossover::PointCrossover`. This class and its implementations are discussed in the _Crossover_ section below.\n* `mutation : MutationOperator(T)` - the mutation operator used to randomly alter an individual to generate genetic diversity in the population. By default this is an instance of `Darwin::Mutation::SimpleMutator`. This class and its implementations are discussed in the _Mutation_ section below.\n* `selection : SelectionOperator(T)` - the selection operator used to select two individuals for mating after their fitness has been determined. By default this is an instance of `Darwin::Selection::FitnessSelector`. his class and its implementations are discussed in the _Selection_ section below.\n* `post : PostProcessor(T) | Nil` - a post processor that will be run after every generation.\n\nThe main method of the `Engine` class is `run(generations : Int32 = 1)`, which will run the operators of selection, crossover, mutation and evaluation, in this order, generating another generation. You can run 1 generation by simple calling `engine.run` or run multiple generations as `engine.run(10)` or `engine.run(generations: 10)`, for example.\n\nThe fields that can be read from the `engine` object are:\n\n* `generation : Int32` - the generation number (starts at 1).\n* `population: Array(Genome(T))` - the population, sorted from highest fitness to lowest. The `Genome` object contains:\n* * `dna : Array(T)` - the gene array that defines the individual.\n* * `fitness : Float64` - the fitness value calculated for the individual by the `Evaluator`.\n\n### Alphabet\n\nAn alphabet is a collection of possible genes that can constitute the genomes in the GA.\n\nIt is important to note that the type of the genes is generic in the base `Alphabet(T)` class, and the choice of type here will determine the type `T` in all other generic classes of this library. For example, if you are working with an `Alphabet(Int32)`, your crossover operators will be an implementation of `Crossover(Int32)`.\n\nThe alphabets provided by this lib are:\n\n* `Darwin::Alphabet::IntAlphabet` - an alphabet where any `Int32` can be a gene. Acceppts parameters `min` and `max` to control the range of integers allowed.\n* `Darwin::Alphabet::ArrayAlphabet(T)` -  has an array of objects of type `T` that act as a gene in the genome.\n* `Darwin::Alphabet::StringAlphabet` - an easier way of making an `ArrayAlphabet(Char)` from a string. Initialized as `StringAlphabet.new(alphabet: \"abcd...\").\n\nExamples:\n\n```crystal\ni_alph = Darwin::Alphabet::IntAlphabet.new(min: 0, max: 9) # IntAlphabet < Alphabet(Int32)\n\na_alph = Darwin::Alphabet::ArrayAlphabet(String).new(genes: [\"gene1\", \"gene2\", \"gene3\"]) # ArrayAlphabet(String) < Alphabet(String)\n\ns_alph = Darwin::Alphabet::StringAlphabet.new(alphabet: \"qwerty\") # StringAlphabet < ArrayAlphabet(Char) < Alphabet(Char)\n\n\ni_alph.random_gene #=> ex: 5\na_alph.random_gene #=> ex: \"gene3\"\ns_alph.random_gene #=> ex: 'w'\n```\n\nHowever, you may also implement your own `Alphabet` and pass it when instantiating the `config` file. You can do this by implementing:\n\n```crystal\nabstract class Alphabet(T)\n    abstract def random_gene() : T\nend\n```\n\nThis `random_gene()` method is used by the `Engine` to instantiate the initial population, as well as by the mutator to alter genes in a genome.\n\n### Selection\n\nThe selection operator is responsible for - given a population of individual genomes - selecting two genomes to be combined to produce a new genome for the next population.\n\nThe implementation of the selection operator provided by this lib is the `Darwin::Selection::FitnessSelector` class, which selects two individuals at random, weighted by the fitness of the individual in relation to the total fitness of the population. In this implementation an individual of fitness `2.0` will be twice as likely to be selected as an individual with a fitness of `1.0`.\n\nHowever, you may also implement your own `Selector` and pass it when instantiating the `engine`.\n\nA `Selector` has to implement:\n\n```crystal\nabstract class SelectionOperator(T)\n    abstract def select_mates(genomes : Array(Darwin::Genome(T))) : Tuple(Darwin::Genome(T), Darwin::Genome(T))\nend\n```\n\nPlease note that unlike the other operators, the selection operator receives the `Darwin::Genome` object (described in the _Engine_ section above), so that it can have access to the fitness of the individuals, which is important for this operation.\n\n### Crossover\n\nThe crossover operator is responsible for combining two parent genomes to generate a new genome that will be carried over the next population.\n\nThe implementations provided out of the box by this library are:\n\n* `Darwin::Crossover::PointCrossover` - selects a random point in the genome and copies everything before this point from one parent and everything after from the other (e.g. combining `AAAAA` and `BBBBB` may result in `AABBB`).\n* `Darwin::Crossover::UniformCrossover` - randomly selects each gene from either parent (e.g. combining `AAAAA` and `BBBBB` may result in `ABAAB`).\n\nIf no crossover operator is passed to the `engine` object, it will use `PointCrossover`.\n\nHowever, you may also implement your own `Crossover` by implementing:\n\n```crystal\nabstract class CrossoverOperator(T)\n    abstract def crossover(genome1 : Array(T), genome2 : Array(T)) : Array(T)\nend\n```\n\n### Mutation\n\nThe mutation operator is responsible for randomly altering the genomes generated in the crossover step before adding them to the next generation. This is extremely important for the GA to add diversity to the population and making sure that it doesn't get stuck in a local maximum because a relevant gene doesn't exist in the population.\n\nThe implementation provided by this library is `Darwin::Mutation::SimpleMutator`, which has a X% chance of mutating each gene for a random gene provided by the `Alphabet` used.\n\nThe default mutator in the engine object is a `SimpleMutator` with the alphabet provided in the `Config` object and a mutatin rate of `0.1` (10%). If you wish to change the mutation rate, simply instantiate another `SimpleMutator` when initializing the `Engine` object, as in:\n\n```crystal\nmutator = Darwin::Mutation::SimpleMutator(alphabet: config.alphabet, probability: your_probability_here)\nengine = Darwin::Engine.new(..., mutation: mutator)\n```\n\nHowever, you may also implement your own `Mutator` by implementing:\n```crystal\nabstract class MutationOperator(T)\n    abstract def mutate(genome : Array(T)) : Array(T)\nend\n```\n\n## Development\n\nDifferent operator implementations should be added to their respective folders and namespaces. For example, a new `Mutator` should go inside the `src/darwin/mutation` folder and be declared inside the `Darwin::Mutation` namespace.\n\nAs many things in the GA involve randomness, a mock of sorts of the `Random` class is provided in `spec/spec_helper.cr`, allowing us to define a sequence of results for the random methods:\n\n```crystal\n  rng = MockRandom(random_ints: [3, 2, 0])\n\n  rng.rand(0...10) #=> 3\n  rng.rand(0...10) #=> 2\n  rng.rand(0...10) #=> 0\n  rng.rand(0...10) #=> IndexError\n```\n\nEvery class that has a random operation receives an optional `rng` parameter on initialization, which we can use to pass the `MockRandom` instance.\n\nAlso, every operator has a `Stub` class that will return static results passed to it, as well as recording the parameters of the calls it received. Example:\n\n```crystal\nm = Darwin::Mutation::StubMutator(mutation_results: [[0, 0 ,0], [1, 1, 1], [2, 2, 2]])\n\nm.mutate([1, 2, 3]) #=> [0, 0, 0]\nm.mutate([4, 5, 6]) #=> [1, 1, 1]\n\nm.calls #=> [[1, 2, 3], [4, 5, 6]]\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/darwin/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Fernando Gouvêa](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"darwin/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"darwin","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"darwin/Darwin","path":"Darwin.html","kind":"module","full_name":"Darwin","name":"Darwin","abstract":false,"locations":[{"filename":"src/darwin.cr","line_number":6,"url":null},{"filename":"src/darwin/alphabet/alphabet.cr","line_number":1,"url":null},{"filename":"src/darwin/config.cr","line_number":4,"url":null},{"filename":"src/darwin/engine.cr","line_number":12,"url":null},{"filename":"src/darwin/genome.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"doc":"Main module of the lib\n\nDefines the `Darwin::PostProcessor` (`Darwin::Post::PostProcessor`) and `Darwin::Evaluator` (`Darwin::Evaluation::Evaluator`) for convenience, since these are usually the classes that will have to be implemented by the user.","summary":"<p>Main module of the lib</p>","types":[{"html_id":"darwin/Darwin/Alphabet","path":"Darwin/Alphabet.html","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet","abstract":false,"locations":[{"filename":"src/darwin/alphabet/alphabet.cr","line_number":1,"url":null},{"filename":"src/darwin/alphabet/array.cr","line_number":3,"url":null},{"filename":"src/darwin/alphabet/int.cr","line_number":3,"url":null},{"filename":"src/darwin/alphabet/string.cr","line_number":3,"url":null},{"filename":"src/darwin/alphabet/stub.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Alphabet/Alphabet","path":"Darwin/Alphabet/Alphabet.html","kind":"class","full_name":"Darwin::Alphabet::Alphabet(T)","name":"Alphabet","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/alphabet/alphabet.cr","line_number":4,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Alphabet/ArrayAlphabet","kind":"class","full_name":"Darwin::Alphabet::ArrayAlphabet(T)","name":"ArrayAlphabet"},{"html_id":"darwin/Darwin/Alphabet/IntAlphabet","kind":"class","full_name":"Darwin::Alphabet::IntAlphabet","name":"IntAlphabet"},{"html_id":"darwin/Darwin/Alphabet/StubAlphabet","kind":"class","full_name":"Darwin::Alphabet::StubAlphabet(T)","name":"StubAlphabet"}],"namespace":{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},"doc":"Abstract alphabet class used to provide genes for the genomes in the GA.","summary":"<p>Abstract alphabet class used to provide genes for the genomes in the GA.</p>","instance_methods":[{"html_id":"random_gene:T-instance-method","name":"random_gene","doc":"Returns a random gene from the set of possible genes.","summary":"<p>Returns a random gene from the set of possible genes.</p>","abstract":true,"location":{"filename":"src/darwin/alphabet/alphabet.cr","line_number":7,"url":null},"def":{"name":"random_gene","return_type":"T","visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Alphabet/ArrayAlphabet","path":"Darwin/Alphabet/ArrayAlphabet.html","kind":"class","full_name":"Darwin::Alphabet::ArrayAlphabet(T)","name":"ArrayAlphabet","abstract":false,"superclass":{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/alphabet/array.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Alphabet/StringAlphabet","kind":"class","full_name":"Darwin::Alphabet::StringAlphabet","name":"StringAlphabet"}],"namespace":{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},"doc":"An alphabet implementation with an array of possible genes.","summary":"<p>An alphabet implementation with an array of possible genes.</p>","constructors":[{"html_id":"new(genes:Array(T),rng:Random=Random.new)-class-method","name":"new","doc":"Constructor that receives the array o possible genes.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Constructor that receives the array o possible genes.</p>","abstract":false,"args":[{"name":"genes","external_name":"genes","restriction":"Array(T)"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(genes : Array(T), rng : Random = Random.new)","args_html":"(genes : Array(T), rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/alphabet/array.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"genes","external_name":"genes","restriction":"Array(T)"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = ArrayAlphabet(T).allocate\n_.initialize(genes, rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"random_gene:T-instance-method","name":"random_gene","doc":"Returns a random element from the array.","summary":"<p>Returns a random element from the array.</p>","abstract":false,"location":{"filename":"src/darwin/alphabet/array.cr","line_number":15,"url":null},"def":{"name":"random_gene","return_type":"T","visibility":"Public","body":"@genes[@rng.rand(@genes.size)]"}}]},{"html_id":"darwin/Darwin/Alphabet/IntAlphabet","path":"Darwin/Alphabet/IntAlphabet.html","kind":"class","full_name":"Darwin::Alphabet::IntAlphabet","name":"IntAlphabet","abstract":false,"superclass":{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/alphabet/int.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},"doc":"An alphabet implementation in which each gene is an Int32 inside a specific range.","summary":"<p>An alphabet implementation in which each gene is an Int32 inside a specific range.</p>","constructors":[{"html_id":"new(min:Int32=Int32::MIN,max:Int32=Int32::MAX,rng:Random=Random.new)-class-method","name":"new","doc":"Constructor that can receive the `min` and `max` values for the range of ints that can be generated as genes.\n\nBy default, the whole Int32 range is available. Use the `min` and `max` parameters to specify the range.\n\nThe `max` value is **included** in the range.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Constructor that can receive the <code>min</code> and <code>max</code> values for the range of ints that can be generated as genes.</p>","abstract":false,"args":[{"name":"min","default_value":"Int32::MIN","external_name":"min","restriction":"::Int32"},{"name":"max","default_value":"Int32::MAX","external_name":"max","restriction":"::Int32"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(min : Int32 = Int32::MIN, max : Int32 = Int32::MAX, rng : Random = Random.new)","args_html":"(min : Int32 = <span class=\"t\">Int32</span><span class=\"t\">::</span><span class=\"t\">MIN</span>, max : Int32 = <span class=\"t\">Int32</span><span class=\"t\">::</span><span class=\"t\">MAX</span>, rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/alphabet/int.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"min","default_value":"Int32::MIN","external_name":"min","restriction":"::Int32"},{"name":"max","default_value":"Int32::MAX","external_name":"max","restriction":"::Int32"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = allocate\n_.initialize(min, max, rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"random_gene:Int32-instance-method","name":"random_gene","doc":"Returns an Int32 inside the `min..max` range.","summary":"<p>Returns an Int32 inside the <code>min..max</code> range.</p>","abstract":false,"location":{"filename":"src/darwin/alphabet/int.cr","line_number":19,"url":null},"def":{"name":"random_gene","return_type":"Int32","visibility":"Public","body":"@rng.rand(@min..@max)"}}]},{"html_id":"darwin/Darwin/Alphabet/StringAlphabet","path":"Darwin/Alphabet/StringAlphabet.html","kind":"class","full_name":"Darwin::Alphabet::StringAlphabet","name":"StringAlphabet","abstract":false,"superclass":{"html_id":"darwin/Darwin/Alphabet/ArrayAlphabet","kind":"class","full_name":"Darwin::Alphabet::ArrayAlphabet","name":"ArrayAlphabet"},"ancestors":[{"html_id":"darwin/Darwin/Alphabet/ArrayAlphabet","kind":"class","full_name":"Darwin::Alphabet::ArrayAlphabet","name":"ArrayAlphabet"},{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/alphabet/string.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},"doc":"A convenience class to create an `Darwin::Alphabet::ArrayAlphabet(T)` of `Char` from a string. ","summary":"<p>A convenience class to create an <code><a href=\"../../Darwin/Alphabet/ArrayAlphabet.html\">Darwin::Alphabet::ArrayAlphabet</a>(T)</code> of <code>Char</code> from a string.</p>","constructors":[{"html_id":"new(alphabet_string:String,rng:Random=Random.new)-class-method","name":"new","doc":"Constructor that receives the string of genes.\n\nEach char in the string will be an element on the `Darwin::Alphabet::ArrayAlphabet(T)` array of genes.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Constructor that receives the string of genes.</p>","abstract":false,"args":[{"name":"alphabet_string","external_name":"alphabet_string","restriction":"String"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(alphabet_string : String, rng : Random = Random.new)","args_html":"(alphabet_string : String, rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/alphabet/string.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"alphabet_string","external_name":"alphabet_string","restriction":"String"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = allocate\n_.initialize(alphabet_string, rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"darwin/Darwin/Alphabet/StubAlphabet","path":"Darwin/Alphabet/StubAlphabet.html","kind":"class","full_name":"Darwin::Alphabet::StubAlphabet(T)","name":"StubAlphabet","abstract":false,"superclass":{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},"ancestors":[{"html_id":"darwin/Darwin/Alphabet/Alphabet","kind":"class","full_name":"Darwin::Alphabet::Alphabet","name":"Alphabet"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/alphabet/stub.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},"doc":"Stub alphabet intended for testing purposes.","summary":"<p>Stub alphabet intended for testing purposes.</p>","constructors":[{"html_id":"new(random_genes:Array(T))-class-method","name":"new","doc":"Constructor that receives an array of genes that will be returned by the stub in order.","summary":"<p>Constructor that receives an array of genes that will be returned by the stub in order.</p>","abstract":false,"args":[{"name":"random_genes","external_name":"random_genes","restriction":"Array(T)"}],"args_string":"(random_genes : Array(T))","args_html":"(random_genes : Array(T))","location":{"filename":"src/darwin/alphabet/stub.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"random_genes","external_name":"random_genes","restriction":"Array(T)"}],"visibility":"Public","body":"_ = StubAlphabet(T).allocate\n_.initialize(random_genes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"random_gene:T-instance-method","name":"random_gene","doc":"Returns the next element in the array or an error if the array has run out.","summary":"<p>Returns the next element in the array or an error if the array has run out.</p>","abstract":false,"location":{"filename":"src/darwin/alphabet/stub.cr","line_number":13,"url":null},"def":{"name":"random_gene","return_type":"T","visibility":"Public","body":"@random_genes.shift"}}]}]},{"html_id":"darwin/Darwin/Config","path":"Darwin/Config.html","kind":"class","full_name":"Darwin::Config(T)","name":"Config","abstract":false,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/config.cr","line_number":11,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"doc":"Configuration class to be used in the initialization of the `Engine` instance.\n\nThis config only contains general info such as genome and population sizes, with the GA operators being passed directly to the `Darwin::Engine` object.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>Configuration class to be used in the initialization of the <code><a href=\"../Darwin/Engine.html\">Engine</a></code> instance.</p>","constructors":[{"html_id":"new(alphabet:Darwin::Alphabet::Alphabet(T),genome_length:Int32,population_size:Int32,elitism:Int32=0)-class-method","name":"new","abstract":false,"args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"},{"name":"genome_length","external_name":"genome_length","restriction":"Int32"},{"name":"population_size","external_name":"population_size","restriction":"Int32"},{"name":"elitism","default_value":"0","external_name":"elitism","restriction":"::Int32"}],"args_string":"(alphabet : Darwin::Alphabet::Alphabet(T), genome_length : Int32, population_size : Int32, elitism : Int32 = 0)","args_html":"(alphabet : <a href=\"../Darwin/Alphabet/Alphabet.html\">Darwin::Alphabet::Alphabet</a>(T), genome_length : Int32, population_size : Int32, elitism : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/darwin/config.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"},{"name":"genome_length","external_name":"genome_length","restriction":"Int32"},{"name":"population_size","external_name":"population_size","restriction":"Int32"},{"name":"elitism","default_value":"0","external_name":"elitism","restriction":"::Int32"}],"visibility":"Public","body":"_ = Config(T).allocate\n_.initialize(alphabet, genome_length, population_size, elitism)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"alphabet:Darwin::Alphabet::Alphabet(T)-instance-method","name":"alphabet","doc":"The alphabet that defines which genes can be part of a genome.","summary":"<p>The alphabet that defines which genes can be part of a genome.</p>","abstract":false,"location":{"filename":"src/darwin/config.cr","line_number":14,"url":null},"def":{"name":"alphabet","return_type":"Darwin::Alphabet::Alphabet(T)","visibility":"Public","body":"@alphabet"}},{"html_id":"alphabet=(alphabet:Darwin::Alphabet::Alphabet(T))-instance-method","name":"alphabet=","doc":"The alphabet that defines which genes can be part of a genome.","summary":"<p>The alphabet that defines which genes can be part of a genome.</p>","abstract":false,"args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"}],"args_string":"(alphabet : Darwin::Alphabet::Alphabet(T))","args_html":"(alphabet : <a href=\"../Darwin/Alphabet/Alphabet.html\">Darwin::Alphabet::Alphabet</a>(T))","location":{"filename":"src/darwin/config.cr","line_number":14,"url":null},"def":{"name":"alphabet=","args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"}],"visibility":"Public","body":"@alphabet = alphabet"}},{"html_id":"elitism:Int32-instance-method","name":"elitism","doc":"How many of the fittest genomes are copied without changes to the next generations.\n\nElitism is a property in the GA that copies the fittest genomes to the next generation directly, without going through the crossover and mutation operators.\nThis may be useful to avoid regressions from one generation to another because the fittest genomes were altered, resulting in a fittest individual with a lower fitness score than the generatino before. Using elitism can speed up the optimization of the GA depending on the problem.\n_default = 0_","summary":"<p>How many of the fittest genomes are copied without changes to the next generations.</p>","abstract":false,"location":{"filename":"src/darwin/config.cr","line_number":27,"url":null},"def":{"name":"elitism","return_type":"Int32","visibility":"Public","body":"@elitism"}},{"html_id":"elitism=(elitism:Int32)-instance-method","name":"elitism=","doc":"How many of the fittest genomes are copied without changes to the next generations.\n\nElitism is a property in the GA that copies the fittest genomes to the next generation directly, without going through the crossover and mutation operators.\nThis may be useful to avoid regressions from one generation to another because the fittest genomes were altered, resulting in a fittest individual with a lower fitness score than the generatino before. Using elitism can speed up the optimization of the GA depending on the problem.\n_default = 0_","summary":"<p>How many of the fittest genomes are copied without changes to the next generations.</p>","abstract":false,"args":[{"name":"elitism","external_name":"elitism","restriction":"Int32"}],"args_string":"(elitism : Int32)","args_html":"(elitism : Int32)","location":{"filename":"src/darwin/config.cr","line_number":27,"url":null},"def":{"name":"elitism=","args":[{"name":"elitism","external_name":"elitism","restriction":"Int32"}],"visibility":"Public","body":"@elitism = elitism"}},{"html_id":"genome_length:Int32-instance-method","name":"genome_length","doc":"How many genes are in each genome","summary":"<p>How many genes are in each genome</p>","abstract":false,"location":{"filename":"src/darwin/config.cr","line_number":17,"url":null},"def":{"name":"genome_length","return_type":"Int32","visibility":"Public","body":"@genome_length"}},{"html_id":"genome_length=(genome_length:Int32)-instance-method","name":"genome_length=","doc":"How many genes are in each genome","summary":"<p>How many genes are in each genome</p>","abstract":false,"args":[{"name":"genome_length","external_name":"genome_length","restriction":"Int32"}],"args_string":"(genome_length : Int32)","args_html":"(genome_length : Int32)","location":{"filename":"src/darwin/config.cr","line_number":17,"url":null},"def":{"name":"genome_length=","args":[{"name":"genome_length","external_name":"genome_length","restriction":"Int32"}],"visibility":"Public","body":"@genome_length = genome_length"}},{"html_id":"population_size:Int32-instance-method","name":"population_size","doc":"How many individuals are in the population of each generation of the GA.","summary":"<p>How many individuals are in the population of each generation of the GA.</p>","abstract":false,"location":{"filename":"src/darwin/config.cr","line_number":20,"url":null},"def":{"name":"population_size","return_type":"Int32","visibility":"Public","body":"@population_size"}},{"html_id":"population_size=(population_size:Int32)-instance-method","name":"population_size=","doc":"How many individuals are in the population of each generation of the GA.","summary":"<p>How many individuals are in the population of each generation of the GA.</p>","abstract":false,"args":[{"name":"population_size","external_name":"population_size","restriction":"Int32"}],"args_string":"(population_size : Int32)","args_html":"(population_size : Int32)","location":{"filename":"src/darwin/config.cr","line_number":20,"url":null},"def":{"name":"population_size=","args":[{"name":"population_size","external_name":"population_size","restriction":"Int32"}],"visibility":"Public","body":"@population_size = population_size"}}]},{"html_id":"darwin/Darwin/Crossover","path":"Darwin/Crossover.html","kind":"module","full_name":"Darwin::Crossover","name":"Crossover","abstract":false,"locations":[{"filename":"src/darwin/crossover/crossover.cr","line_number":1,"url":null},{"filename":"src/darwin/crossover/point.cr","line_number":3,"url":null},{"filename":"src/darwin/crossover/stub.cr","line_number":3,"url":null},{"filename":"src/darwin/crossover/uniform.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","path":"Darwin/Crossover/CrossoverOperator.html","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator(T)","name":"CrossoverOperator","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/crossover/crossover.cr","line_number":9,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Crossover/PointCrossover","kind":"class","full_name":"Darwin::Crossover::PointCrossover(T)","name":"PointCrossover"},{"html_id":"darwin/Darwin/Crossover/StubCrossover","kind":"class","full_name":"Darwin::Crossover::StubCrossover(T)","name":"StubCrossover"},{"html_id":"darwin/Darwin/Crossover/UniformCrossover","kind":"class","full_name":"Darwin::Crossover::UniformCrossover(T)","name":"UniformCrossover"}],"namespace":{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},"doc":"The crossover operator is responsible for combining two parent genomes to generate a new genome that will be carried over the next population.\n\nThe idea behind the crossover is that if the genes represent different features of a solution to the problem being optimized,\nthen combining features of two different solutions could yield a better solution, by selecting the \"good parts\" of each solution.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>The crossover operator is responsible for combining two parent genomes to generate a new genome that will be carried over the next population.</p>","instance_methods":[{"html_id":"crossover(genome1:Array(T),genome2:Array(T)):Array(T)-instance-method","name":"crossover","doc":"Generates a new genome from the two parent genomes received.","summary":"<p>Generates a new genome from the two parent genomes received.</p>","abstract":true,"args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"args_string":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","args_html":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","location":{"filename":"src/darwin/crossover/crossover.cr","line_number":12,"url":null},"def":{"name":"crossover","args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Crossover/PointCrossover","path":"Darwin/Crossover/PointCrossover.html","kind":"class","full_name":"Darwin::Crossover::PointCrossover(T)","name":"PointCrossover","abstract":false,"superclass":{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},"ancestors":[{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/crossover/point.cr","line_number":12,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},"doc":"A point crossover implementation for `CrossoverOperator`.\n\nA point crossover selects a random point in the genome and copies everything before this point from one parent and everything after from the other\n\nEx: combining `AAAAA` and `BBBBB` may result in `AABBB`.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A point crossover implementation for <code><a href=\"../../Darwin/Crossover/CrossoverOperator.html\">CrossoverOperator</a></code>.</p>","constructors":[{"html_id":"new(rng:Random=Random.new)-class-method","name":"new","doc":"Default constructor.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Default constructor.</p>","abstract":false,"args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(rng : Random = Random.new)","args_html":"(rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/crossover/point.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = PointCrossover(T).allocate\n_.initialize(rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"crossover(genome1:Array(T),genome2:Array(T)):Array(T)-instance-method","name":"crossover","doc":"Generates a new genome from the two parent genomes received.","summary":"<p>Generates a new genome from the two parent genomes received.</p>","abstract":false,"args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"args_string":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","args_html":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","location":{"filename":"src/darwin/crossover/point.cr","line_number":20,"url":null},"def":{"name":"crossover","args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"index = @rng.rand(0...genome2.size)\ngenome1[...index] + genome2[index...]\n"}}]},{"html_id":"darwin/Darwin/Crossover/StubCrossover","path":"Darwin/Crossover/StubCrossover.html","kind":"class","full_name":"Darwin::Crossover::StubCrossover(T)","name":"StubCrossover","abstract":false,"superclass":{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},"ancestors":[{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/crossover/stub.cr","line_number":8,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},"doc":"A stub `CrossoverOperator` intended for testing.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A stub <code><a href=\"../../Darwin/Crossover/CrossoverOperator.html\">CrossoverOperator</a></code> intended for testing.</p>","constructors":[{"html_id":"new(crossover_results:Array(Array(T))=[]ofArray(T))-class-method","name":"new","doc":"Constructor that receives an array of results the stub will return.\n\nIf the array runs out, the stub will simply return the first parent received.","summary":"<p>Constructor that receives an array of results the stub will return.</p>","abstract":false,"args":[{"name":"crossover_results","default_value":"[] of Array(T)","external_name":"crossover_results","restriction":"::Array(::Array(T))"}],"args_string":"(crossover_results : Array(Array(T)) = [] of Array(T))","args_html":"(crossover_results : Array(Array(T)) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Array</span>(<span class=\"t\">T</span>))","location":{"filename":"src/darwin/crossover/stub.cr","line_number":16,"url":null},"def":{"name":"new","args":[{"name":"crossover_results","default_value":"[] of Array(T)","external_name":"crossover_results","restriction":"::Array(::Array(T))"}],"visibility":"Public","body":"_ = StubCrossover(T).allocate\n_.initialize(crossover_results)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"calls-instance-method","name":"calls","doc":"All the calls received by the stub, with each element being a tuple of the parents received in the call.","summary":"<p>All the calls received by the stub, with each element being a tuple of the parents received in the call.</p>","abstract":false,"location":{"filename":"src/darwin/crossover/stub.cr","line_number":11,"url":null},"def":{"name":"calls","visibility":"Public","body":"@calls"}},{"html_id":"calls=(calls:Array(Tuple(Array(T),Array(T))))-instance-method","name":"calls=","doc":"All the calls received by the stub, with each element being a tuple of the parents received in the call.","summary":"<p>All the calls received by the stub, with each element being a tuple of the parents received in the call.</p>","abstract":false,"args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Tuple(::Array(T), ::Array(T)))"}],"args_string":"(calls : Array(Tuple(Array(T), Array(T))))","args_html":"(calls : Array(Tuple(Array(T), Array(T))))","location":{"filename":"src/darwin/crossover/stub.cr","line_number":11,"url":null},"def":{"name":"calls=","args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Tuple(::Array(T), ::Array(T)))"}],"visibility":"Public","body":"@calls = calls"}},{"html_id":"crossover(genome1:Array(T),genome2:Array(T)):Array(T)-instance-method","name":"crossover","doc":"Generates a new genome from the two parent genomes received.","summary":"<p>Generates a new genome from the two parent genomes received.</p>","abstract":false,"args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"args_string":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","args_html":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","location":{"filename":"src/darwin/crossover/stub.cr","line_number":19,"url":null},"def":{"name":"crossover","args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"@calls.push(({genome1, genome2}))\nif @crossover_results.size > 0\n  @crossover_results.shift\nelse\n  genome1\nend\n"}}]},{"html_id":"darwin/Darwin/Crossover/UniformCrossover","path":"Darwin/Crossover/UniformCrossover.html","kind":"class","full_name":"Darwin::Crossover::UniformCrossover(T)","name":"UniformCrossover","abstract":false,"superclass":{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},"ancestors":[{"html_id":"darwin/Darwin/Crossover/CrossoverOperator","kind":"class","full_name":"Darwin::Crossover::CrossoverOperator","name":"CrossoverOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/crossover/uniform.cr","line_number":12,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},"doc":"An uniform crossover implementation for `CrossoverOperator`.\n\nUniform crossover randomly selects each gene from either parent.\n\nEx: combining `AAAAA` and `BBBBB` may result in `ABAAB`.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>An uniform crossover implementation for <code><a href=\"../../Darwin/Crossover/CrossoverOperator.html\">CrossoverOperator</a></code>.</p>","constructors":[{"html_id":"new(rng:Random=Random.new)-class-method","name":"new","doc":"Default constructor.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Default constructor.</p>","abstract":false,"args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(rng : Random = Random.new)","args_html":"(rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/crossover/uniform.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = UniformCrossover(T).allocate\n_.initialize(rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"crossover(genome1:Array(T),genome2:Array(T)):Array(T)-instance-method","name":"crossover","doc":"Generates a new genome from the two parent genomes received.","summary":"<p>Generates a new genome from the two parent genomes received.</p>","abstract":false,"args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"args_string":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","args_html":"(genome1 : Array(T), genome2 : Array(T)) : Array(T)","location":{"filename":"src/darwin/crossover/uniform.cr","line_number":20,"url":null},"def":{"name":"crossover","args":[{"name":"genome1","external_name":"genome1","restriction":"Array(T)"},{"name":"genome2","external_name":"genome2","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"(0...genome1.size).map do |i|\n  if @rng.next_bool\n    genome1[i]\n  else\n    genome2[i]\n  end\nend"}}]}]},{"html_id":"darwin/Darwin/Engine","path":"Darwin/Engine.html","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine","abstract":false,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Darwin/Post","kind":"module","full_name":"Darwin::Post","name":"Post"},{"html_id":"darwin/Darwin/Selection","kind":"module","full_name":"Darwin::Selection","name":"Selection"},{"html_id":"darwin/Darwin/Mutation","kind":"module","full_name":"Darwin::Mutation","name":"Mutation"},{"html_id":"darwin/Darwin/Evaluation","kind":"module","full_name":"Darwin::Evaluation","name":"Evaluation"},{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/engine.cr","line_number":17,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},{"html_id":"darwin/Darwin/Alphabet","kind":"module","full_name":"Darwin::Alphabet","name":"Alphabet"},{"html_id":"darwin/Darwin/Crossover","kind":"module","full_name":"Darwin::Crossover","name":"Crossover"},{"html_id":"darwin/Darwin/Evaluation","kind":"module","full_name":"Darwin::Evaluation","name":"Evaluation"},{"html_id":"darwin/Darwin/Mutation","kind":"module","full_name":"Darwin::Mutation","name":"Mutation"},{"html_id":"darwin/Darwin/Post","kind":"module","full_name":"Darwin::Post","name":"Post"},{"html_id":"darwin/Darwin/Selection","kind":"module","full_name":"Darwin::Selection","name":"Selection"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"doc":"The main class that runs the GA.\nShuold be initialized with at minimum a `Darwin::Config` object and a `Darwin::Evaluator` implementation.\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>The main class that runs the GA.</p>","constructors":[{"html_id":"new(config:Config(T),evaluation:Evaluator(T),crossover:CrossoverOperator(T)=PointCrossover(T).new,mutation:MutationOperator(T)=SimpleMutator.new(config.alphabet,@@DEFAULT_MUTATION_RATE),selection:SelectionOperator(T)=FitnessSelector(T).new,post:PostProcessor(T)|Nil=nil)-class-method","name":"new","doc":"Custructor that initializes the engine object with at minimum a config object and a evaluator implementation, but can receive custom GA operators as optional parameters.\n\nDifferent implementations of the GA operators can be passed in the `crossover`, `mutation` and `selection` named parameters, as well as a post processor as `post`.\n\nEx:\n```\nmy_alphabet = Darwin::Alphabet::StringAlphabet(\"qwerty\")\nengine = Darwin::Engine.new(\n    config: Darwin::Config.new(alphabet: my_alphabet, genome_length: 10, population_size: 50),\n    evaluation: MyCustomEvaluator.new,\n    crossover: Darwin::Crossover:UniformCrossover.new,\n    mutation: Darwin::Mutation::SimpleMutator(my_alphabet, probability: 0.01),\n    selection: MyCustomSelector.new,\n    post: MyPostProcessor.new \n)\n```","summary":"<p>Custructor that initializes the engine object with at minimum a config object and a evaluator implementation, but can receive custom GA operators as optional parameters.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config(T)"},{"name":"evaluation","external_name":"evaluation","restriction":"Evaluator(T)"},{"name":"crossover","default_value":"PointCrossover(T).new","external_name":"crossover","restriction":"CrossoverOperator(T)"},{"name":"mutation","default_value":"SimpleMutator.new(config.alphabet, @@DEFAULT_MUTATION_RATE)","external_name":"mutation","restriction":"MutationOperator(T)"},{"name":"selection","default_value":"FitnessSelector(T).new","external_name":"selection","restriction":"SelectionOperator(T)"},{"name":"post","default_value":"nil","external_name":"post","restriction":"PostProcessor(T) | Nil"}],"args_string":"(config : Config(T), evaluation : Evaluator(T), crossover : CrossoverOperator(T) = PointCrossover(T).new, mutation : MutationOperator(T) = SimpleMutator.new(config.alphabet, @@DEFAULT_MUTATION_RATE), selection : SelectionOperator(T) = FitnessSelector(T).new, post : PostProcessor(T) | Nil = nil)","args_html":"(config : <a href=\"../Darwin/Config.html\">Config</a>(T), evaluation : <a href=\"../Darwin/Evaluation/Evaluator.html\">Evaluator</a>(T), crossover : <a href=\"../Darwin/Crossover/CrossoverOperator.html\">CrossoverOperator</a>(T) = <span class=\"t\">PointCrossover</span>(<span class=\"t\">T</span>).new, mutation : <a href=\"../Darwin/Mutation/MutationOperator.html\">MutationOperator</a>(T) = <span class=\"t\">SimpleMutator</span>.new(config.alphabet, @@DEFAULT_MUTATION_RATE), selection : <a href=\"../Darwin/Selection/SelectionOperator.html\">SelectionOperator</a>(T) = <span class=\"t\">FitnessSelector</span>(<span class=\"t\">T</span>).new, post : <a href=\"../Darwin/Post/PostProcessor.html\">PostProcessor</a>(T) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/darwin/engine.cr","line_number":73,"url":null},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config(T)"},{"name":"evaluation","external_name":"evaluation","restriction":"Evaluator(T)"},{"name":"crossover","default_value":"PointCrossover(T).new","external_name":"crossover","restriction":"CrossoverOperator(T)"},{"name":"mutation","default_value":"SimpleMutator.new(config.alphabet, @@DEFAULT_MUTATION_RATE)","external_name":"mutation","restriction":"MutationOperator(T)"},{"name":"selection","default_value":"FitnessSelector(T).new","external_name":"selection","restriction":"SelectionOperator(T)"},{"name":"post","default_value":"nil","external_name":"post","restriction":"PostProcessor(T) | Nil"}],"visibility":"Public","body":"_ = Engine(T).allocate\n_.initialize(config, evaluation, crossover, mutation, selection, post)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"evaluate_population-instance-method","name":"evaluate_population","doc":"Runs the evaluator for every member of the population and then sorts it by fitness from highest to lowest.","summary":"<p>Runs the evaluator for every member of the population and then sorts it by fitness from highest to lowest.</p>","abstract":false,"location":{"filename":"src/darwin/engine.cr","line_number":104,"url":null},"def":{"name":"evaluate_population","visibility":"Public","body":"@population.each do |genome|\n  fitness = @evaluation.evaluate(genome.dna)\n  genome.fitness = fitness\nend\n@population_evaluated = true\n@population.sort_by! do |genome|\n  -genome.fitness\nend\np = @post\nif p\n  p.process(self)\nend\n"}},{"html_id":"generate_new_population-instance-method","name":"generate_new_population","doc":"Generates a new population from the current one (highly discouraged, prioritize using `run()` instead).\n\nGenerates a new population from the current one by running the `selection` operator to choose two parents,\nthen the `crossover` operator to combine those two parents in a new genome, then the `mutation` operator to alter the resulting genome.\n\nThis method expects the current population to already be evaluated.\n\nIt is intended mostly for internal usage within the engine and its usage is highly discouraged, unless you have very specific needs. Use`run()` instead.","summary":"<p>Generates a new population from the current one (highly discouraged, prioritize using <code><a href=\"../Darwin/Engine.html#run%28generations%3D1%29-instance-method\">#run()</a></code> instead).</p>","abstract":false,"location":{"filename":"src/darwin/engine.cr","line_number":125,"url":null},"def":{"name":"generate_new_population","visibility":"Public","body":"new_population = (0...@config.population_size).map do\n  parent1, parent2 = @selection.select_mates(@population)\n  offspring_dna = @crossover.crossover(parent1.dna, parent2.dna)\n  Genome.new(@mutation.mutate(offspring_dna))\nend\n@config.elitism.times do |i|\n  new_population[i] = @population[i]\n  new_population[i].fitness = 0.0\nend\n@population = new_population\n@generation = @generation + 1\n@population_evaluated = false\n"}},{"html_id":"generation-instance-method","name":"generation","doc":"Number of the generation currently in the `population` property.\nStarts at 1 and is incremented each time a new population is generated.","summary":"<p>Number of the generation currently in the <code><a href=\"../Darwin/Engine.html#population-instance-method\">#population</a></code> property.</p>","abstract":false,"location":{"filename":"src/darwin/engine.cr","line_number":55,"url":null},"def":{"name":"generation","visibility":"Public","body":"@generation"}},{"html_id":"population-instance-method","name":"population","doc":"The current population of the GA, sorted by fitness from highest to lowest.\n\nEach `Darwin::Genome(T)` object contains the DNA (array of genes) and the fitness calculated for that individual.\nAfter evaluating a population, the engine will sort the population by fitness, from highest to lowest, so the fittest individuals are always at the beginning of the array.","summary":"<p>The current population of the GA, sorted by fitness from highest to lowest.</p>","abstract":false,"location":{"filename":"src/darwin/engine.cr","line_number":51,"url":null},"def":{"name":"population","visibility":"Public","body":"@population"}},{"html_id":"run(generations=1)-instance-method","name":"run","doc":"Runs N generations of the GA.\n\n`engine.run` will run 1 generation, but can run multiple (e.g. 10) using the `generations` parameter as in `engine.run(10)` or `engine.run(generations: 10)`.\n\nThe resulting population after `run()` will already have been evaluated and sorted.\n\nThis method evaluates the current population first if it hasn't yet been evaluated, either because it is the initial population or because you have been using the `generate_new_population()` method (not recommended).","summary":"<p>Runs N generations of the GA.</p>","abstract":false,"args":[{"name":"generations","default_value":"1","external_name":"generations","restriction":""}],"args_string":"(generations = 1)","args_html":"(generations = <span class=\"n\">1</span>)","location":{"filename":"src/darwin/engine.cr","line_number":92,"url":null},"def":{"name":"run","args":[{"name":"generations","default_value":"1","external_name":"generations","restriction":""}],"visibility":"Public","body":"generations.times do\n  if @population_evaluated\n  else\n    self.evaluate_population\n  end\n  self.generate_new_population\n  self.evaluate_population\nend"}}]},{"html_id":"darwin/Darwin/Evaluation","path":"Darwin/Evaluation.html","kind":"module","full_name":"Darwin::Evaluation","name":"Evaluation","abstract":false,"locations":[{"filename":"src/darwin/evaluation/evaluation.cr","line_number":1,"url":null},{"filename":"src/darwin/evaluation/stub.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Evaluation/Evaluator","path":"Darwin/Evaluation/Evaluator.html","kind":"class","full_name":"Darwin::Evaluation::Evaluator(T)","name":"Evaluator","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/evaluation/evaluation.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Evaluation/StubEvaluator","kind":"class","full_name":"Darwin::Evaluation::StubEvaluator(T)","name":"StubEvaluator"}],"namespace":{"html_id":"darwin/Darwin/Evaluation","kind":"module","full_name":"Darwin::Evaluation","name":"Evaluation"},"doc":"An `Evaluator` determine a genome's fitness score.\n\nThis is the main class to be implemented before using `Darwin`, as this implementation is what optimizes the GA towards the solution of the problem.","summary":"<p>An <code><a href=\"../../Darwin/Evaluation/Evaluator.html\">Evaluator</a></code> determine a genome's fitness score.</p>","instance_methods":[{"html_id":"evaluate(dna:Array(T)):Float64-instance-method","name":"evaluate","doc":"Receives a genome's DNA (an array of genes) and returns its fitness score.\n\nThe fitness score should always be positive.","summary":"<p>Receives a genome's DNA (an array of genes) and returns its fitness score.</p>","abstract":true,"args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"args_string":"(dna : Array(T)) : Float64","args_html":"(dna : Array(T)) : Float64","location":{"filename":"src/darwin/evaluation/evaluation.cr","line_number":11,"url":null},"def":{"name":"evaluate","args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Evaluation/StubEvaluator","path":"Darwin/Evaluation/StubEvaluator.html","kind":"class","full_name":"Darwin::Evaluation::StubEvaluator(T)","name":"StubEvaluator","abstract":false,"superclass":{"html_id":"darwin/Darwin/Evaluation/Evaluator","kind":"class","full_name":"Darwin::Evaluation::Evaluator","name":"Evaluator"},"ancestors":[{"html_id":"darwin/Darwin/Evaluation/Evaluator","kind":"class","full_name":"Darwin::Evaluation::Evaluator","name":"Evaluator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/evaluation/stub.cr","line_number":6,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Evaluation","kind":"module","full_name":"Darwin::Evaluation","name":"Evaluation"},"doc":"An `Evaluator` stub to be used for testing purposes.","summary":"<p>An <code><a href=\"../../Darwin/Evaluation/Evaluator.html\">Evaluator</a></code> stub to be used for testing purposes.</p>","constructors":[{"html_id":"new(evaluations:Array(Float64)=[]ofFloat64,default_evaluation:Float64=1.0)-class-method","name":"new","doc":"Constructor that receives an array of fitness scores to be returned in order by the stub, and a default score to be returned if the array runs out.","summary":"<p>Constructor that receives an array of fitness scores to be returned in order by the stub, and a default score to be returned if the array runs out.</p>","abstract":false,"args":[{"name":"evaluations","default_value":"[] of Float64","external_name":"evaluations","restriction":"::Array(::Float64)"},{"name":"default_evaluation","default_value":"1.0","external_name":"default_evaluation","restriction":"::Float64"}],"args_string":"(evaluations : Array(Float64) = [] of Float64, default_evaluation : Float64 = 1.0)","args_html":"(evaluations : Array(Float64) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Float64</span>, default_evaluation : Float64 = <span class=\"n\">1.0</span>)","location":{"filename":"src/darwin/evaluation/stub.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"evaluations","default_value":"[] of Float64","external_name":"evaluations","restriction":"::Array(::Float64)"},{"name":"default_evaluation","default_value":"1.0","external_name":"default_evaluation","restriction":"::Float64"}],"visibility":"Public","body":"_ = StubEvaluator(T).allocate\n_.initialize(evaluations, default_evaluation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"calls-instance-method","name":"calls","doc":"All the calls received by the stub, with each element being the array of genes received by the `evaluate()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genes received by the <code><a href=\"../../Darwin/Evaluation/StubEvaluator.html#evaluate%28dna%3AArray%28T%29%29%3AFloat64-instance-method\">#evaluate()</a></code> method.</p>","abstract":false,"location":{"filename":"src/darwin/evaluation/stub.cr","line_number":9,"url":null},"def":{"name":"calls","visibility":"Public","body":"@calls"}},{"html_id":"calls=(calls:Array(Array(T)))-instance-method","name":"calls=","doc":"All the calls received by the stub, with each element being the array of genes received by the `evaluate()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genes received by the <code><a href=\"../../Darwin/Evaluation/StubEvaluator.html#evaluate%28dna%3AArray%28T%29%29%3AFloat64-instance-method\">#evaluate()</a></code> method.</p>","abstract":false,"args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(T))"}],"args_string":"(calls : Array(Array(T)))","args_html":"(calls : Array(Array(T)))","location":{"filename":"src/darwin/evaluation/stub.cr","line_number":9,"url":null},"def":{"name":"calls=","args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(T))"}],"visibility":"Public","body":"@calls = calls"}},{"html_id":"evaluate(dna:Array(T)):Float64-instance-method","name":"evaluate","doc":"Receives a genome's DNA (an array of genes) and returns its fitness score.\n\nThe fitness score should always be positive.","summary":"<p>Receives a genome's DNA (an array of genes) and returns its fitness score.</p>","abstract":false,"args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"args_string":"(dna : Array(T)) : Float64","args_html":"(dna : Array(T)) : Float64","location":{"filename":"src/darwin/evaluation/stub.cr","line_number":16,"url":null},"def":{"name":"evaluate","args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":"@calls.push(dna)\nevaluation = @default_evaluation\nif @evaluations.size > 0\n  evaluation = @evaluations.shift\nend\nevaluation\n"}},{"html_id":"evaluations:Array(Float64)-instance-method","name":"evaluations","abstract":false,"location":{"filename":"src/darwin/evaluation/stub.cr","line_number":10,"url":null},"def":{"name":"evaluations","return_type":"Array(Float64)","visibility":"Public","body":"@evaluations"}},{"html_id":"evaluations=(evaluations:Array(Float64))-instance-method","name":"evaluations=","abstract":false,"args":[{"name":"evaluations","external_name":"evaluations","restriction":"Array(Float64)"}],"args_string":"(evaluations : Array(Float64))","args_html":"(evaluations : Array(Float64))","location":{"filename":"src/darwin/evaluation/stub.cr","line_number":10,"url":null},"def":{"name":"evaluations=","args":[{"name":"evaluations","external_name":"evaluations","restriction":"Array(Float64)"}],"visibility":"Public","body":"@evaluations = evaluations"}}]}]},{"html_id":"darwin/Darwin/Evaluator","path":"Darwin/Evaluator.html","kind":"alias","full_name":"Darwin::Evaluator","name":"Evaluator","abstract":false,"locations":[{"filename":"src/darwin.cr","line_number":8,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":true,"aliased":"Darwin::Evaluation::Evaluator(T)","aliased_html":"<a href=\"../Darwin/Evaluation/Evaluator.html\">Darwin::Evaluation::Evaluator(T)</a>","const":false,"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"}},{"html_id":"darwin/Darwin/Genome","path":"Darwin/Genome.html","kind":"class","full_name":"Darwin::Genome(T)","name":"Genome","abstract":false,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/genome.cr","line_number":7,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"doc":"A genome object that holds an array of genes and its fitness score.\nThe generic `T` type refers to the type of a gene.","summary":"<p>A genome object that holds an array of genes and its fitness score.</p>","constructors":[{"html_id":"new(dna:Array(T))-class-method","name":"new","doc":"Constructor that receives the array of genes.\nInitial fitness is always 0.0","summary":"<p>Constructor that receives the array of genes.</p>","abstract":false,"args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"args_string":"(dna : Array(T))","args_html":"(dna : Array(T))","location":{"filename":"src/darwin/genome.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"dna","external_name":"dna","restriction":"Array(T)"}],"visibility":"Public","body":"_ = Genome(T).allocate\n_.initialize(dna)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"dna-instance-method","name":"dna","doc":"The array of genes.","summary":"<p>The array of genes.</p>","abstract":false,"location":{"filename":"src/darwin/genome.cr","line_number":10,"url":null},"def":{"name":"dna","visibility":"Public","body":"@dna"}},{"html_id":"dna=(dna:Array(T))-instance-method","name":"dna=","doc":"The array of genes.","summary":"<p>The array of genes.</p>","abstract":false,"args":[{"name":"dna","external_name":"dna","restriction":"::Array(T)"}],"args_string":"(dna : Array(T))","args_html":"(dna : Array(T))","location":{"filename":"src/darwin/genome.cr","line_number":10,"url":null},"def":{"name":"dna=","args":[{"name":"dna","external_name":"dna","restriction":"::Array(T)"}],"visibility":"Public","body":"@dna = dna"}},{"html_id":"fitness-instance-method","name":"fitness","doc":"The fitness score calculated by `Darwin::Engine(T)`.","summary":"<p>The fitness score calculated by <code><a href=\"../Darwin/Engine.html\">Darwin::Engine</a>(T)</code>.</p>","abstract":false,"location":{"filename":"src/darwin/genome.cr","line_number":13,"url":null},"def":{"name":"fitness","visibility":"Public","body":"@fitness"}},{"html_id":"fitness=(fitness:Float64)-instance-method","name":"fitness=","doc":"The fitness score calculated by `Darwin::Engine(T)`.","summary":"<p>The fitness score calculated by <code><a href=\"../Darwin/Engine.html\">Darwin::Engine</a>(T)</code>.</p>","abstract":false,"args":[{"name":"fitness","external_name":"fitness","restriction":"::Float64"}],"args_string":"(fitness : Float64)","args_html":"(fitness : Float64)","location":{"filename":"src/darwin/genome.cr","line_number":13,"url":null},"def":{"name":"fitness=","args":[{"name":"fitness","external_name":"fitness","restriction":"::Float64"}],"visibility":"Public","body":"@fitness = fitness"}}]},{"html_id":"darwin/Darwin/GenomeFactory","path":"Darwin/GenomeFactory.html","kind":"class","full_name":"Darwin::GenomeFactory(T)","name":"GenomeFactory","abstract":false,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/genome.cr","line_number":22,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"doc":"A factory implementation to generate new random genomes.","summary":"<p>A factory implementation to generate new random genomes.</p>","constructors":[{"html_id":"new(config:Config(T))-class-method","name":"new","doc":"Constructor that receives a `Darwin::Config(T)` object containing the alphabet and genome length.","summary":"<p>Constructor that receives a <code><a href=\"../Darwin/Config.html\">Darwin::Config</a>(T)</code> object containing the alphabet and genome length.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config(T)"}],"args_string":"(config : Config(T))","args_html":"(config : <a href=\"../Darwin/Config.html\">Config</a>(T))","location":{"filename":"src/darwin/genome.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config(T)"}],"visibility":"Public","body":"_ = GenomeFactory(T).allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"random:Genome(T)-instance-method","name":"random","doc":"Generate a random genome.\n\nThe genome length is dictated by the `Darwin::Config(T)` object passed at the factory initialization.\n\nThe random genes come from the `Darwin::Alphabet::Alphabet#random_gene()` method implemented by the alphabet.","summary":"<p>Generate a random genome.</p>","abstract":false,"location":{"filename":"src/darwin/genome.cr","line_number":33,"url":null},"def":{"name":"random","return_type":"Genome(T)","visibility":"Public","body":"Genome.new((0...@config.genome_length).map do\n  @config.alphabet.random_gene\nend)"}}]},{"html_id":"darwin/Darwin/Mutation","path":"Darwin/Mutation.html","kind":"module","full_name":"Darwin::Mutation","name":"Mutation","abstract":false,"locations":[{"filename":"src/darwin/mutation/mutation.cr","line_number":1,"url":null},{"filename":"src/darwin/mutation/simple.cr","line_number":4,"url":null},{"filename":"src/darwin/mutation/stub.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Mutation/MutationOperator","path":"Darwin/Mutation/MutationOperator.html","kind":"class","full_name":"Darwin::Mutation::MutationOperator(T)","name":"MutationOperator","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/mutation/mutation.cr","line_number":11,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Mutation/SimpleMutator","kind":"class","full_name":"Darwin::Mutation::SimpleMutator(T)","name":"SimpleMutator"},{"html_id":"darwin/Darwin/Mutation/StubMutator","kind":"class","full_name":"Darwin::Mutation::StubMutator(T)","name":"StubMutator"}],"namespace":{"html_id":"darwin/Darwin/Mutation","kind":"module","full_name":"Darwin::Mutation","name":"Mutation"},"doc":"The mutation operator is responsible for altering a genome before it is added to the next generation.\n\nThis is extremely important for the GA to add diversity to the population and making sure that it doesn't get stuck\nin a local maximum because a relevant gene doesn't exist in the population. For exmple, if the genome ABCDE is the optimal\nsolution for the problem at hand, but no genome in the population contains the gene C as the third gene, then no amount\nof selection and crossovers would ever yield the optimal solution without a mutation to generate that feature in the population.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>The mutation operator is responsible for altering a genome before it is added to the next generation.</p>","instance_methods":[{"html_id":"mutate(genome:Array(T)):Array(T)-instance-method","name":"mutate","doc":"Receives the array of genes and returns a new one after mutation.","summary":"<p>Receives the array of genes and returns a new one after mutation.</p>","abstract":true,"args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"args_string":"(genome : Array(T)) : Array(T)","args_html":"(genome : Array(T)) : Array(T)","location":{"filename":"src/darwin/mutation/mutation.cr","line_number":14,"url":null},"def":{"name":"mutate","args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Mutation/SimpleMutator","path":"Darwin/Mutation/SimpleMutator.html","kind":"class","full_name":"Darwin::Mutation::SimpleMutator(T)","name":"SimpleMutator","abstract":false,"superclass":{"html_id":"darwin/Darwin/Mutation/MutationOperator","kind":"class","full_name":"Darwin::Mutation::MutationOperator","name":"MutationOperator"},"ancestors":[{"html_id":"darwin/Darwin/Mutation/MutationOperator","kind":"class","full_name":"Darwin::Mutation::MutationOperator","name":"MutationOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/mutation/simple.cr","line_number":10,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Mutation","kind":"module","full_name":"Darwin::Mutation","name":"Mutation"},"doc":"A simple implementation for the `MutationOperator`, which for each gene in the genome\nmay randomly (controlled by a probability parameter) assign a random gene in the alphabet.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A simple implementation for the <code><a href=\"../../Darwin/Mutation/MutationOperator.html\">MutationOperator</a></code>, which for each gene in the genome may randomly (controlled by a probability parameter) assign a random gene in the alphabet.</p>","constructors":[{"html_id":"new(alphabet:Darwin::Alphabet::Alphabet(T),probability:Float64,rng:Random=Random.new)-class-method","name":"new","doc":"Constructor that recieves the `alphabet` used to generate random genes and a `probability` of choosing to alter each gene.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Constructor that recieves the <code>alphabet</code> used to generate random genes and a <code>probability</code> of choosing to alter each gene.</p>","abstract":false,"args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"},{"name":"probability","external_name":"probability","restriction":"Float64"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(alphabet : Darwin::Alphabet::Alphabet(T), probability : Float64, rng : Random = Random.new)","args_html":"(alphabet : <a href=\"../../Darwin/Alphabet/Alphabet.html\">Darwin::Alphabet::Alphabet</a>(T), probability : Float64, rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/mutation/simple.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"alphabet","external_name":"alphabet","restriction":"Darwin::Alphabet::Alphabet(T)"},{"name":"probability","external_name":"probability","restriction":"Float64"},{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = SimpleMutator(T).allocate\n_.initialize(alphabet, probability, rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"mutate(genome:Array(T)):Array(T)-instance-method","name":"mutate","doc":"Receives the array of genes and returns a new one after mutation.","summary":"<p>Receives the array of genes and returns a new one after mutation.</p>","abstract":false,"args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"args_string":"(genome : Array(T)) : Array(T)","args_html":"(genome : Array(T)) : Array(T)","location":{"filename":"src/darwin/mutation/simple.cr","line_number":18,"url":null},"def":{"name":"mutate","args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"genome.map do |gene|\n  if @rng.rand < @probability\n    @alphabet.random_gene\n  else\n    gene\n  end\nend"}}]},{"html_id":"darwin/Darwin/Mutation/StubMutator","path":"Darwin/Mutation/StubMutator.html","kind":"class","full_name":"Darwin::Mutation::StubMutator(T)","name":"StubMutator","abstract":false,"superclass":{"html_id":"darwin/Darwin/Mutation/MutationOperator","kind":"class","full_name":"Darwin::Mutation::MutationOperator","name":"MutationOperator"},"ancestors":[{"html_id":"darwin/Darwin/Mutation/MutationOperator","kind":"class","full_name":"Darwin::Mutation::MutationOperator","name":"MutationOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/mutation/stub.cr","line_number":8,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Mutation","kind":"module","full_name":"Darwin::Mutation","name":"Mutation"},"doc":"A stub `MutationOperator` intended for testing.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A stub <code><a href=\"../../Darwin/Mutation/MutationOperator.html\">MutationOperator</a></code> intended for testing.</p>","constructors":[{"html_id":"new(mutation_results:Array(Array(T))=[]ofArray(T))-class-method","name":"new","doc":"Constructor that receives an array of results the stub will return.\n\nIf the array runs out, the stub will simply return the original genome that was received.","summary":"<p>Constructor that receives an array of results the stub will return.</p>","abstract":false,"args":[{"name":"mutation_results","default_value":"[] of Array(T)","external_name":"mutation_results","restriction":"::Array(::Array(T))"}],"args_string":"(mutation_results : Array(Array(T)) = [] of Array(T))","args_html":"(mutation_results : Array(Array(T)) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Array</span>(<span class=\"t\">T</span>))","location":{"filename":"src/darwin/mutation/stub.cr","line_number":16,"url":null},"def":{"name":"new","args":[{"name":"mutation_results","default_value":"[] of Array(T)","external_name":"mutation_results","restriction":"::Array(::Array(T))"}],"visibility":"Public","body":"_ = StubMutator(T).allocate\n_.initialize(mutation_results)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"calls-instance-method","name":"calls","doc":"All the calls received by the stub, with each element being the array of genes received by the `mutate()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genes received by the <code><a href=\"../../Darwin/Mutation/StubMutator.html#mutate%28genome%3AArray%28T%29%29%3AArray%28T%29-instance-method\">#mutate()</a></code> method.</p>","abstract":false,"location":{"filename":"src/darwin/mutation/stub.cr","line_number":11,"url":null},"def":{"name":"calls","visibility":"Public","body":"@calls"}},{"html_id":"calls=(calls:Array(Array(T)))-instance-method","name":"calls=","doc":"All the calls received by the stub, with each element being the array of genes received by the `mutate()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genes received by the <code><a href=\"../../Darwin/Mutation/StubMutator.html#mutate%28genome%3AArray%28T%29%29%3AArray%28T%29-instance-method\">#mutate()</a></code> method.</p>","abstract":false,"args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(T))"}],"args_string":"(calls : Array(Array(T)))","args_html":"(calls : Array(Array(T)))","location":{"filename":"src/darwin/mutation/stub.cr","line_number":11,"url":null},"def":{"name":"calls=","args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(T))"}],"visibility":"Public","body":"@calls = calls"}},{"html_id":"mutate(genome:Array(T)):Array(T)-instance-method","name":"mutate","doc":"Receives the array of genes and returns a new one after mutation.","summary":"<p>Receives the array of genes and returns a new one after mutation.</p>","abstract":false,"args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"args_string":"(genome : Array(T)) : Array(T)","args_html":"(genome : Array(T)) : Array(T)","location":{"filename":"src/darwin/mutation/stub.cr","line_number":19,"url":null},"def":{"name":"mutate","args":[{"name":"genome","external_name":"genome","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"@calls.push(genome)\nif @mutation_results.size > 0\n  @mutation_results.shift\nelse\n  genome\nend\n"}}]}]},{"html_id":"darwin/Darwin/Post","path":"Darwin/Post.html","kind":"module","full_name":"Darwin::Post","name":"Post","abstract":false,"locations":[{"filename":"src/darwin/post/post.cr","line_number":3,"url":null},{"filename":"src/darwin/post/stub.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Post/PostProcessor","path":"Darwin/Post/PostProcessor.html","kind":"class","full_name":"Darwin::Post::PostProcessor(T)","name":"PostProcessor","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/post/post.cr","line_number":22,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Post/StubProcessor","kind":"class","full_name":"Darwin::Post::StubProcessor(T)","name":"StubProcessor"}],"namespace":{"html_id":"darwin/Darwin/Post","kind":"module","full_name":"Darwin::Post","name":"Post"},"doc":"A `PostProcessor` should implement the `process(engine : Engine(T))` method that receives the whole\nDarwin engine to do additional processing after a generation has been evaluated and sorted.\n\nThe post processor is a good place to conduct any analysis of the GA population, such as computing\nstats (highest/agerage/medium fitness etc.), printing or outputting the results and more.\n\nThe `Engine`object received has a `Engine#population` property is array of `Genome`, each of which\nwill contain the `Genome#dna` property with the array of genes of that specific individual, as well as\nthe `Genome#property` property with its fitness score.\n\nThe `population` array received by the `PostProcessor` is sorted by fitness from highest to lowest.\nAs such, the fittest individual can be accessed as:\n```\nfittest = engine.population[0]\n```\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A <code><a href=\"../../Darwin/Post/PostProcessor.html\">PostProcessor</a></code> should implement the <code><a href=\"../../Darwin/Post/PostProcessor.html#process%28engine%3AEngine%28T%29%29-instance-method\">#process(engine : Engine(T))</a></code> method that receives the whole Darwin engine to do additional processing after a generation has been evaluated and sorted.</p>","instance_methods":[{"html_id":"process(engine:Engine(T))-instance-method","name":"process","doc":"Executes additional processing after the population of a generation has been evaluated and sorted.","summary":"<p>Executes additional processing after the population of a generation has been evaluated and sorted.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":"Engine(T)"}],"args_string":"(engine : Engine(T))","args_html":"(engine : <a href=\"../../Darwin/Engine.html\">Engine</a>(T))","location":{"filename":"src/darwin/post/post.cr","line_number":25,"url":null},"def":{"name":"process","args":[{"name":"engine","external_name":"engine","restriction":"Engine(T)"}],"visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Post/StubProcessor","path":"Darwin/Post/StubProcessor.html","kind":"class","full_name":"Darwin::Post::StubProcessor(T)","name":"StubProcessor","abstract":false,"superclass":{"html_id":"darwin/Darwin/Post/PostProcessor","kind":"class","full_name":"Darwin::Post::PostProcessor","name":"PostProcessor"},"ancestors":[{"html_id":"darwin/Darwin/Post/PostProcessor","kind":"class","full_name":"Darwin::Post::PostProcessor","name":"PostProcessor"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/post/stub.cr","line_number":8,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Post","kind":"module","full_name":"Darwin::Post","name":"Post"},"doc":"A stub `PostProcessor` intended for testing.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A stub <code><a href=\"../../Darwin/Post/PostProcessor.html\">PostProcessor</a></code> intended for testing.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Default constructor","summary":"<p>Default constructor</p>","abstract":false,"location":{"filename":"src/darwin/post/stub.cr","line_number":14,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = StubProcessor(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"process(engine:Darwin::Engine(T))-instance-method","name":"process","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Darwin::Engine(T)"}],"args_string":"(engine : Darwin::Engine(T))","args_html":"(engine : <a href=\"../../Darwin/Engine.html\">Darwin::Engine</a>(T))","location":{"filename":"src/darwin/post/stub.cr","line_number":17,"url":null},"def":{"name":"process","args":[{"name":"engine","external_name":"engine","restriction":"Darwin::Engine(T)"}],"visibility":"Public","body":"@times_called = @times_called + 1"}},{"html_id":"times_called-instance-method","name":"times_called","doc":"Tracks how many times the stub's `process` method as been called.","summary":"<p>Tracks how many times the stub's <code><a href=\"../../Darwin/Post/StubProcessor.html#process%28engine%3ADarwin%3A%3AEngine%28T%29%29-instance-method\">#process</a></code> method as been called.</p>","abstract":false,"location":{"filename":"src/darwin/post/stub.cr","line_number":11,"url":null},"def":{"name":"times_called","visibility":"Public","body":"@times_called"}},{"html_id":"times_called=(times_called:Int32)-instance-method","name":"times_called=","doc":"Tracks how many times the stub's `process` method as been called.","summary":"<p>Tracks how many times the stub's <code><a href=\"../../Darwin/Post/StubProcessor.html#process%28engine%3ADarwin%3A%3AEngine%28T%29%29-instance-method\">#process</a></code> method as been called.</p>","abstract":false,"args":[{"name":"times_called","external_name":"times_called","restriction":"::Int32"}],"args_string":"(times_called : Int32)","args_html":"(times_called : Int32)","location":{"filename":"src/darwin/post/stub.cr","line_number":11,"url":null},"def":{"name":"times_called=","args":[{"name":"times_called","external_name":"times_called","restriction":"::Int32"}],"visibility":"Public","body":"@times_called = times_called"}}]}]},{"html_id":"darwin/Darwin/PostProcessor","path":"Darwin/PostProcessor.html","kind":"alias","full_name":"Darwin::PostProcessor","name":"PostProcessor","abstract":false,"locations":[{"filename":"src/darwin.cr","line_number":7,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":true,"aliased":"Darwin::Post::PostProcessor(T)","aliased_html":"<a href=\"../Darwin/Post/PostProcessor.html\">Darwin::Post::PostProcessor(T)</a>","const":false,"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"}},{"html_id":"darwin/Darwin/Selection","path":"Darwin/Selection.html","kind":"module","full_name":"Darwin::Selection","name":"Selection","abstract":false,"locations":[{"filename":"src/darwin/selection/fitness.cr","line_number":4,"url":null},{"filename":"src/darwin/selection/selection.cr","line_number":3,"url":null},{"filename":"src/darwin/selection/stub.cr","line_number":3,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"darwin/Darwin/Engine","kind":"class","full_name":"Darwin::Engine(T)","name":"Engine"}],"namespace":{"html_id":"darwin/Darwin","kind":"module","full_name":"Darwin","name":"Darwin"},"types":[{"html_id":"darwin/Darwin/Selection/FitnessSelector","path":"Darwin/Selection/FitnessSelector.html","kind":"class","full_name":"Darwin::Selection::FitnessSelector(T)","name":"FitnessSelector","abstract":false,"superclass":{"html_id":"darwin/Darwin/Selection/SelectionOperator","kind":"class","full_name":"Darwin::Selection::SelectionOperator","name":"SelectionOperator"},"ancestors":[{"html_id":"darwin/Darwin/Selection/SelectionOperator","kind":"class","full_name":"Darwin::Selection::SelectionOperator","name":"SelectionOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/selection/fitness.cr","line_number":19,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Selection","kind":"module","full_name":"Darwin::Selection","name":"Selection"},"doc":"A basic implementation of the `SelectionOperator` in which the probability of a genome being selected\nis its fitness in relation to the total fitness of the population (fitness / total_fitness)\n\nEx:\n```markdown\n| Genome | Fitness | Probability |   Calculation    |\n|--------|---------|-------------|------------------|\n|   A    |   1.0   |     17%     | 1.0 / 6.0 = 0.17 |\n|   B    |   3.0   |     50%     | 3.0 / 6.0 = 0.5  |\n|   C    |   2.0   |     33%     | 2.0 / 6.0 = 0.33 |\n```\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A basic implementation of the <code><a href=\"../../Darwin/Selection/SelectionOperator.html\">SelectionOperator</a></code> in which the probability of a genome being selected is its fitness in relation to the total fitness of the population (fitness / total_fitness)</p>","constructors":[{"html_id":"new(rng:Random=Random.new)-class-method","name":"new","doc":"Default constructor.\n\nA custom `Random` object can be passed as the `rng` parameter.","summary":"<p>Default constructor.</p>","abstract":false,"args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"args_string":"(rng : Random = Random.new)","args_html":"(rng : Random = <span class=\"t\">Random</span>.new)","location":{"filename":"src/darwin/selection/fitness.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"rng","default_value":"Random.new","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"_ = FitnessSelector(T).allocate\n_.initialize(rng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"select_mates(genomes:Array(Darwin::Genome(T))):Tuple(Darwin::Genome(T),Darwin::Genome(T))-instance-method","name":"select_mates","doc":"Receives an array of `Genome` and returns a tuple with two genomes chosen to act as parents in the GA.","summary":"<p>Receives an array of <code><a href=\"../../Darwin/Genome.html\">Genome</a></code> and returns a tuple with two genomes chosen to act as parents in the GA.</p>","abstract":false,"args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Darwin::Genome(T))"}],"args_string":"(genomes : Array(Darwin::Genome(T))) : Tuple(Darwin::Genome(T), Darwin::Genome(T))","args_html":"(genomes : Array(<a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T))) : Tuple(<a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T), <a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T))","location":{"filename":"src/darwin/selection/fitness.cr","line_number":27,"url":null},"def":{"name":"select_mates","args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Darwin::Genome(T))"}],"return_type":"Tuple(Darwin::Genome(T), Darwin::Genome(T))","visibility":"Public","body":"total_fitness = 0.0\ngenomes.each do |genome|\n  total_fitness = total_fitness + genome.fitness\nend\nselected_genomes = (0...2).map do\n  random = total_fitness * @rng.rand\n  idx = 0\n  (0...genomes.size).each do |i|\n    idx = i\n    if random < genomes[i].fitness\n      break\n    end\n    random = random - genomes[i].fitness\n  end\n  genomes[idx]\nend\n{selected_genomes[0], selected_genomes[1]}\n"}}]},{"html_id":"darwin/Darwin/Selection/SelectionOperator","path":"Darwin/Selection/SelectionOperator.html","kind":"class","full_name":"Darwin::Selection::SelectionOperator(T)","name":"SelectionOperator","abstract":true,"superclass":{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/selection/selection.cr","line_number":14,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"darwin/Darwin/Selection/FitnessSelector","kind":"class","full_name":"Darwin::Selection::FitnessSelector(T)","name":"FitnessSelector"},{"html_id":"darwin/Darwin/Selection/StubSelector","kind":"class","full_name":"Darwin::Selection::StubSelector(T)","name":"StubSelector"}],"namespace":{"html_id":"darwin/Darwin/Selection","kind":"module","full_name":"Darwin::Selection","name":"Selection"},"doc":"The selection operator is responsible for, given population of genomes, choosing two parents to be combined into the next generation.\n\nIdeally, the selector should take into account the `fitness` score of each genome when determining\nthe probability of a genome being selected as a parent. This is important because theoretically the\ngenomes with high fitness have better features for the solution of the problem than the ones with\nlower fitness, so it is better to maximize the chance of those features being carried to the next\ngeneration.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>The selection operator is responsible for, given population of genomes, choosing two parents to be combined into the next generation.</p>","instance_methods":[{"html_id":"select_mates(genomes:Array(Darwin::Genome(T))):Tuple(Darwin::Genome(T),Darwin::Genome(T))-instance-method","name":"select_mates","doc":"Receives an array of `Genome` and returns a tuple with two genomes chosen to act as parents in the GA.","summary":"<p>Receives an array of <code><a href=\"../../Darwin/Genome.html\">Genome</a></code> and returns a tuple with two genomes chosen to act as parents in the GA.</p>","abstract":true,"args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Darwin::Genome(T))"}],"args_string":"(genomes : Array(Darwin::Genome(T))) : Tuple(Darwin::Genome(T), Darwin::Genome(T))","args_html":"(genomes : Array(<a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T))) : Tuple(<a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T), <a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T))","location":{"filename":"src/darwin/selection/selection.cr","line_number":17,"url":null},"def":{"name":"select_mates","args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Darwin::Genome(T))"}],"return_type":"Tuple(Darwin::Genome(T), Darwin::Genome(T))","visibility":"Public","body":""}}]},{"html_id":"darwin/Darwin/Selection/StubSelector","path":"Darwin/Selection/StubSelector.html","kind":"class","full_name":"Darwin::Selection::StubSelector(T)","name":"StubSelector","abstract":false,"superclass":{"html_id":"darwin/Darwin/Selection/SelectionOperator","kind":"class","full_name":"Darwin::Selection::SelectionOperator","name":"SelectionOperator"},"ancestors":[{"html_id":"darwin/Darwin/Selection/SelectionOperator","kind":"class","full_name":"Darwin::Selection::SelectionOperator","name":"SelectionOperator"},{"html_id":"darwin/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"darwin/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/darwin/selection/stub.cr","line_number":8,"url":null}],"repository_name":"darwin","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"darwin/Darwin/Selection","kind":"module","full_name":"Darwin::Selection","name":"Selection"},"doc":"A stub of `SelectionOperator` for testing purposes.\n\nThe generic `T` type refers to the type of a gene in the implementation.","summary":"<p>A stub of <code><a href=\"../../Darwin/Selection/SelectionOperator.html\">SelectionOperator</a></code> for testing purposes.</p>","constructors":[{"html_id":"new(selection_ids:Array(Tuple(Int32,Int32))=[]ofTuple(Int32,Int32))-class-method","name":"new","doc":"Constructor that receives the array of ids (position in the genome array) that will be chosen by the stub.\n\nIf the array runs out, the stub will return the first two genomes in the array received as a parameter.","summary":"<p>Constructor that receives the array of ids (position in the genome array) that will be chosen by the stub.</p>","abstract":false,"args":[{"name":"selection_ids","default_value":"[] of Tuple(Int32, Int32)","external_name":"selection_ids","restriction":"::Array(::Tuple(::Int32, ::Int32))"}],"args_string":"(selection_ids : Array(Tuple(Int32, Int32)) = [] of Tuple(Int32, Int32))","args_html":"(selection_ids : Array(Tuple(Int32, Int32)) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Tuple</span>(<span class=\"t\">Int32</span>, <span class=\"t\">Int32</span>))","location":{"filename":"src/darwin/selection/stub.cr","line_number":16,"url":null},"def":{"name":"new","args":[{"name":"selection_ids","default_value":"[] of Tuple(Int32, Int32)","external_name":"selection_ids","restriction":"::Array(::Tuple(::Int32, ::Int32))"}],"visibility":"Public","body":"_ = StubSelector(T).allocate\n_.initialize(selection_ids)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"calls-instance-method","name":"calls","doc":"All the calls received by the stub, with each element being the array of genomes received by the `select_mates()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genomes received by the <code><a href=\"../../Darwin/Selection/StubSelector.html#select_mates%28genomes%3AArray%28Genome%28T%29%29%29%3ATuple%28Genome%28T%29%2CGenome%28T%29%29-instance-method\">#select_mates()</a></code> method.</p>","abstract":false,"location":{"filename":"src/darwin/selection/stub.cr","line_number":11,"url":null},"def":{"name":"calls","visibility":"Public","body":"@calls"}},{"html_id":"calls=(calls:Array(Array(Darwin::Genome(T))))-instance-method","name":"calls=","doc":"All the calls received by the stub, with each element being the array of genomes received by the `select_mates()` method.","summary":"<p>All the calls received by the stub, with each element being the array of genomes received by the <code><a href=\"../../Darwin/Selection/StubSelector.html#select_mates%28genomes%3AArray%28Genome%28T%29%29%29%3ATuple%28Genome%28T%29%2CGenome%28T%29%29-instance-method\">#select_mates()</a></code> method.</p>","abstract":false,"args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(::Darwin::Genome(T)))"}],"args_string":"(calls : Array(Array(Darwin::Genome(T))))","args_html":"(calls : Array(Array(<a href=\"../../Darwin/Genome.html\">Darwin::Genome</a>(T))))","location":{"filename":"src/darwin/selection/stub.cr","line_number":11,"url":null},"def":{"name":"calls=","args":[{"name":"calls","external_name":"calls","restriction":"::Array(::Array(::Darwin::Genome(T)))"}],"visibility":"Public","body":"@calls = calls"}},{"html_id":"select_mates(genomes:Array(Genome(T))):Tuple(Genome(T),Genome(T))-instance-method","name":"select_mates","abstract":false,"args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Genome(T))"}],"args_string":"(genomes : Array(Genome(T))) : Tuple(Genome(T), Genome(T))","args_html":"(genomes : Array(<a href=\"../../Darwin/Genome.html\">Genome</a>(T))) : Tuple(<a href=\"../../Darwin/Genome.html\">Genome</a>(T), <a href=\"../../Darwin/Genome.html\">Genome</a>(T))","location":{"filename":"src/darwin/selection/stub.cr","line_number":19,"url":null},"def":{"name":"select_mates","args":[{"name":"genomes","external_name":"genomes","restriction":"Array(Genome(T))"}],"return_type":"Tuple(Genome(T), Genome(T))","visibility":"Public","body":"@calls.push(genomes)\nids = {0, 1}\nif @selection_ids.size > 0\n  ids = @selection_ids.shift\nend\n{genomes[ids[0]], genomes[ids[1]]}\n"}}]}]}]}]}}